{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Jenkins 2: highly available Jenkins master and dynamic agents, a cloudonaut.io template",
  "Parameters": {
    "VPC": {
      "Description": "Use VPC output from vpc stack.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "SubnetA": {
      "Description": "Use SubnetAPublic or SubnetAPrivate output from vpc stack. If you choose SubnetAPrivate you need a NAT instance or a NAT gateway.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "SubnetB": {
      "Description": "Use SubnetBPublic or SubnetBPrivate output from vpc stack. If you choose SubnetAPrivate you need a NAT instance or a NAT gateway.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "KeyName": {
      "Description": "The key pair to establish a SSH connection to the Jenkins master and agents.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "MasterELBScheme": {
      "Description": "Indicates whether the load balancer in front of the Jenkins master is Internet-facing or internal.",
      "Type": "String",
      "AllowedValues": ["internet-facing", "internal"],
      "Default": "internet-facing"
    },
    "MasterELBSubnets": {
      "Description": "Use SubnetAPublic and SubntBPublic outputs for ELBScheme internet-facing or SubnetAPrivate and SubnetBPrivate outputs for ELBScheme intrnal from vpc stack.",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "MasterInstanceType": {
      "Description": "The instance type of the Jenkins master.",
      "Type": "String",
      "Default": "t2.micro"
    },
    "MasterAdminPassword": {
      "Description": "A password for the Jenkins master admin.",
      "Type": "String",
      "NoEcho": "true"
    },
    "AgentInstanceType": {
      "Description": "The instance type of the Jenkins agents.",
      "Type": "String",
      "Default": "t2.micro"
    },
    "AgentInstanceType": {
      "Description": "The instance type of the Jenkins agents.",
      "Type": "String",
      "Default": "t2.micro"
    },
    "AgentVolumeSize": {
      "Description": "The volume size, in Gibibytes (GiB). This can be a number from 8 â€“ 1024.",
      "Type": "Number",
      "Default": "8",
      "MinValue": "8",
      "MaxValue": "1024"
    }
  },
  "Mappings": {
    "RegionMap": {
      "ap-south-1": {"AMI": "ami-ffbdd790"},
      "eu-west-1": {"AMI": "ami-f9dd458a"},
      "ap-southeast-1": {"AMI": "ami-a59b49c6"},
      "ap-southeast-2": {"AMI": "ami-dc361ebf"},
      "eu-central-1": {"AMI": "ami-ea26ce85"},
      "ap-northeast-2": {"AMI": "ami-2b408b45"},
      "ap-northeast-1": {"AMI": "ami-374db956"},
      "us-east-1": {"AMI": "ami-6869aa05"},
      "sa-east-1": {"AMI": "ami-6dd04501"},
      "us-west-1": {"AMI": "ami-31490d51"},
      "us-west-2": {"AMI": "ami-7172b611"}
    }
  },
  "Resources": {
    "MasterStorageSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "jenkins-master",
        "VpcId": {"Ref": "VPC"},
        "SecurityGroupIngress": [{
          "SourceSecurityGroupId": {"Ref": "MasterSecurityGroup"},
          "FromPort": 2049,
          "ToPort": 2049,
          "IpProtocol": "tcp"
        }]
      }
    },
    "MasterStorage": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [{
          "Value": "jenkins-master-storage",
          "Key": "Name"
        }],
        "PerformanceMode": "generalPurpose"
      }
    },
    "MasterStorageMountTargetA": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {"Ref": "MasterStorage"},
        "SecurityGroups": [{"Ref": "MasterStorageSecurityGroup"}],
        "SubnetId": {"Ref": "SubnetA"}
      }
    },
    "MasterStorageMountTargetB": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {"Ref": "MasterStorage"},
        "SecurityGroups": [{"Ref": "MasterStorageSecurityGroup"}],
        "SubnetId": {"Ref": "SubnetB"}
      }
    },
    "MasterELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "jenkins-elb-master",
        "VpcId": {"Ref": "VPC"},
        "SecurityGroupIngress": [{
          "CidrIp": "0.0.0.0/0",
          "FromPort": 80,
          "ToPort": 80,
          "IpProtocol": "tcp"
        }, {
          "CidrIp": "0.0.0.0/0",
          "FromPort": 49817,
          "ToPort": 49817,
          "IpProtocol": "tcp"
        }]
      }
    },
    "MasterELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "3",
          "Interval": "10",
          "Target": "TCP:8080",
          "Timeout": "5",
          "UnhealthyThreshold": "3"
        },
        "LoadBalancerName": "jenkins-master",
        "Listeners": [{
          "InstancePort": "8080",
          "InstanceProtocol": "HTTP",
          "LoadBalancerPort": "80",
          "Protocol": "HTTP"
        }, {
          "InstancePort": "49817",
          "InstanceProtocol": "TCP",
          "LoadBalancerPort": "49817",
          "Protocol": "TCP"
        }],
        "Scheme": {"Ref": "MasterELBScheme"},
        "SecurityGroups": [{"Ref": "MasterELBSecurityGroup"}],
        "Subnets": {"Ref": "MasterELBSubnets"},
        "Tags": [{
          "Key": "Name",
          "Value": "jenkins-master"
        }]
      }
    },
    "MasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "jenkins-master",
        "VpcId": {"Ref": "VPC"},
        "SecurityGroupIngress": [{
          "CidrIp": "0.0.0.0/0",
          "FromPort": 22,
          "ToPort": 22,
          "IpProtocol": "tcp"
        }, {
          "SourceSecurityGroupId": {"Ref": "MasterELBSecurityGroup"},
          "FromPort": 8080,
          "ToPort": 8080,
          "IpProtocol": "tcp"
        }, {
          "SourceSecurityGroupId": {"Ref": "MasterELBSecurityGroup"},
          "FromPort": 49817,
          "ToPort": 49817,
          "IpProtocol": "tcp"
        }]
      }
    },
    "MasterLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": ["mount",  "install", "setup"]
          },
          "mount": {
            "packages": {
              "yum": {
                "nfs-utils": []
              }
            },
            "commands": {
              "a_groupadd": {
                "command": "groupadd -g 497 jenkins",
                "test": "if grep -q jenkins /etc/group; then exit 1; else exit 0; fi"
              },
              "b_useradd": {
                "command": "adduser -u 498 -g 497 -s /bin/false -d /var/lib/jenkins -c 'Jenkins Continuous Integration Server' jenkins",
                "test": "if grep -q jenkins /etc/passwd; then exit 1; else exit 0; fi"
              },
              "c_mountpoint_mkdir": {
                "command": "mkdir /var/lib/jenkins && chown -R jenkins:jenkins /var/lib/jenkins",
                "test": "[ ! -d /var/lib/jenkins ]"
              },
              "d_mountpoint_mount": {
                "command": {"Fn::Join": ["", ["mount -t nfs4 -o vers=4.1 \"$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).", {"Ref": "MasterStorage"}, ".efs.", {"Ref": "AWS::Region"}, ".amazonaws.com:/\" /var/lib/jenkins"]]},
                "test": "if mount | grep -q /var/lib/jenkins; then exit 1; else exit 0; fi"
              }
            }
          },
          "install": {
            "packages": {
              "rpm": {
                "jenkins": "http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.2-1.1.noarch.rpm"
              },
              "yum": {
                "git": []
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {"Fn::Join": ["", [
                  "[main]", "\n",
                  "stack=", {"Ref": "AWS::StackId"}, "\n",
                  "region=", {"Ref": "AWS::Region"}, "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {"Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]", "\n",
                  "triggers=post.update", "\n",
                  "path=Resources.MasterLaunchConfiguration.Metadata.AWS::CloudFormation::Init", "\n",
                  "action=/opt/aws/bin/cfn-init --verbose --stack=", {"Ref": "AWS::StackName"}, " --region=", {"Ref": "AWS::Region"}, " --resource=MasterLaunchConfiguration", "\n",
                  "runas=root", "\n"
                ]]}
              }
            },
            "services": {
              "sysvinit": {
                "jenkins": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "packages": {
                    "rpm": ["jenkins"]
                  }
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "setup": {
            "files": {
              "/root/plugins.txt": {
                "content": {"Fn::Join": ["", [
                  "cloudbees-folder", "\n",
                  "timestamper", "\n",
                  "workflow-aggregator", "\n",
                  "subversion", "\n",
                  "ldap", "\n",
                  "antisamy-markup-formatter", "\n",
                  "ws-cleanup", "\n",
                  "github-organization-folder", "\n",
                  "ssh-slaves", "\n",
                  "email-ext", "\n",
                  "build-timeout", "\n",
                  "ant", "\n",
                  "pipeline-stage-view", "\n",
                  "matrix-auth", "\n",
                  "mailer", "\n",
                  "credentials-binding", "\n",
                  "gradle", "\n",
                  "git", "\n",
                  "pam-auth", "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "a_await_jenkins": {
                "command": "until $(curl --output /dev/null --silent --head --fail --user \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" http://localhost:8080/cli/); do printf '.'; sleep 1; done",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "b_activate_slave_agent_port": {
                "command": "sed -i -e \"s@<slaveAgentPort>.*</slaveAgentPort>@<slaveAgentPort>49817</slaveAgentPort>@\" /var/lib/jenkins/config.xml",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "c_restart_jenkins": {
                "command":  "service jenkins restart",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "d_await_jenkins": {
                "command": "until $(curl --output /dev/null --silent --head --fail --user \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" http://localhost:8080/cli/); do printf '.'; sleep 1; done",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "e_install_plugins": {
                "command": "while read -r plugin; do java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s \"http://localhost:8080/\" -noKeyAuth install-plugin \"$plugin\" --username admin --password \"$(cat /var/lib/jenkins/secrets/initialAdminPassword)\"; done < /root/plugins.txt",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "f_restart_jenkins": {
                "command":  "service jenkins restart",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "g_await_jenkins": {
                "command": "until $(curl --output /dev/null --silent --head --fail --user \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" http://localhost:8080/cli/); do printf '.'; sleep 1; done",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "h_set_admin_password": {
                "command": {"Fn::Join": ["", ["echo 'jenkins.model.Jenkins.instance.securityRealm.createAccount(\"admin\", \"", {"Ref": "MasterAdminPassword"}, "\")' | java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s \"http://localhost:8080/\" -noKeyAuth groovy = --username admin --password \"$(cat /var/lib/jenkins/secrets/initialAdminPassword)\""]]},
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },

              "z_create_setup_done_file": {
                "command": "echo \"Setup done. Don not delete this file.\" > /var/lib/jenkins/setup_done.txt",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "AMI"]},
        "InstanceType": {"Ref": "MasterInstanceType"},
        "SecurityGroups": [{"Ref": "MasterSecurityGroup"}],
        "KeyName": {"Ref": "KeyName"},
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -x", "\n",
          "/opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource MasterLaunchConfiguration --region ", {"Ref": "AWS::Region"}, "\n",
          "/opt/aws/bin/cfn-signal -e $? --stack ", {"Ref": "AWS::StackName"}, " --resource MasterAutoScalingGroup --region ", {"Ref": "AWS::Region"}, "\n"
        ]]}}
      }
    },
    "MasterAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": ["MasterStorageMountTargetA", "MasterStorageMountTargetB"],
      "Properties": {
        "LaunchConfigurationName": {"Ref": "MasterLaunchConfiguration"},
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "HealthCheckGracePeriod": 120,
        "HealthCheckType": "ELB",
        "VPCZoneIdentifier": [{"Ref": "SubnetA"}, {"Ref": "SubnetB"}],
        "LoadBalancerNames": [{"Ref": "MasterELB"}],
        "Tags": [{
          "PropagateAtLaunch": true,
          "Value": "jenkins-master",
          "Key": "Name"
        }]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": "PT10M",
          "WaitOnResourceSignals": true
        }
      }
    },
    "AgentSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "jenkins-agent",
        "VpcId": {"Ref": "VPC"},
        "SecurityGroupIngress": [{
          "CidrIp": "0.0.0.0/0",
          "FromPort": 22,
          "ToPort": 22,
          "IpProtocol": "tcp"
        }]
      }
    },
    "AgentLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": ["install", "setup"]
          },
          "install": {
            "packages": {
              "yum": {
                "git": []
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {"Fn::Join": ["", [
                  "[main]", "\n",
                  "stack=", {"Ref": "AWS::StackId"}, "\n",
                  "region=", {"Ref": "AWS::Region"}, "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {"Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]", "\n",
                  "triggers=post.update", "\n",
                  "path=Resources.AgentLaunchConfiguration.Metadata.AWS::CloudFormation::Init", "\n",
                  "action=/opt/aws/bin/cfn-init --verbose --stack=", {"Ref": "AWS::StackName"}, " --region=", {"Ref": "AWS::Region"}, " --resource=AgentLaunchConfiguration", "\n",
                  "runas=root", "\n"
                ]]}
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "setup": {
            "files": {
              "/root/agent.xml": {
                "content": {"Fn::Join": ["", [
                  "<?xml version='1.0' encoding='UTF-8'?>", "\n",
                  "<slave>", "\n",
                  "  <description>AWS Auto Scaling Agent</description>", "\n",
                  "  <remoteFS>/tmp</remoteFS>", "\n",
                  "  <numExecutors>1</numExecutors>", "\n",
                  "  <mode>NORMAL</mode>", "\n",
                  "  <retentionStrategy class=\"hudson.slaves.RetentionStrategy$Always\"/>", "\n",
                  "  <launcher class=\"hudson.slaves.JNLPLauncher\"/>", "\n",
                  "  <label></label>", "\n",
                  "  <nodeProperties/>", "\n",
                  "</slave>"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "a_groupadd": {
                "command": "groupadd -g 497 jenkins",
                "test": "if grep -q jenkins /etc/group; then exit 1; else exit 0; fi"
              },
              "b_useradd": {
                "command": "adduser -u 498 -g 497 -s /bin/bash -d /var/lib/jenkins -c 'Jenkins Continuous Integration Server' jenkins",
                "test": "if grep -q jenkins /etc/passwd; then exit 1; else exit 0; fi"
              },
              "c_mkdir": {
                "command": "mkdir /var/lib/jenkins && chown -R jenkins:jenkins /var/lib/jenkins",
                "test": "[ ! -d /var/lib/jenkins ]"
              },
              "d_download_slave_jar": {
                "command": "wget http://jenkins-master-2031977385.eu-west-1.elb.amazonaws.com/jnlpJars/slave.jar",
                "cwd": "/var/lib/jenkins",
                "test": "[ ! -f /var/lib/jenkins/slave.jar ]"
              },
              "e_download_cli_jar": {
                "command": "wget http://jenkins-master-2031977385.eu-west-1.elb.amazonaws.com/jnlpJars/jenkins-cli.jar",
                "cwd": "/var/lib/jenkins",
                "test": "[ ! -f /var/lib/jenkins/jenkins-cli.jar ]"
              },
              "f_create_agent": {
                "command": {"Fn::Join": ["", ["cat /root/agent.xml | java -jar jenkins-cli.jar -s http://", {"Fn::GetAtt": ["MasterELB", "DNSName"]}, " -noKeyAuth create-node $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --username admin --password ", {"Ref": "MasterAdminPassword"}]]},
                "cwd": "/var/lib/jenkins",
                "test": {"Fn::Join": ["", ["if java -jar jenkins-cli.jar -s http://", {"Fn::GetAtt": ["MasterELB", "DNSName"]}, " -noKeyAuth get-node $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --username admin --password ", {"Ref": "MasterAdminPassword"}, "; then exit 1; else exit 0; fi"]]}
              },
              "g_start_agent": {
                "command": {"Fn::Join": ["", ["su - jenkins -c 'screen -m -d -S agent java -jar slave.jar -jnlpUrl http://", {"Fn::GetAtt": ["MasterELB", "DNSName"]}, "/computer/$(curl -s http://169.254.169.254/latest/meta-data/instance-id)/slave-agent.jnlp -jnlpCredentials admin:", {"Ref": "MasterAdminPassword"}, "'"]]},
                "cwd": "/var/lib/jenkins",
                "test": "if su - jenkins -c 'screen -ls' | grep -q agent; then exit 1; else exit 0; fi"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "AMI"]},
        "InstanceType": {"Ref": "AgentInstanceType"},
        "SecurityGroups": [{"Ref": "AgentSecurityGroup"}],
        "KeyName": {"Ref": "KeyName"},
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/xvda",
          "Ebs": {
            "VolumeSize": {"Ref": "AgentVolumeSize"},
            "VolumeType": "gp2"
          }
        }],
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -x", "\n",
          "/opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource AgentLaunchConfiguration --region ", {"Ref": "AWS::Region"}, "\n",
          "/opt/aws/bin/cfn-signal -e $? --stack ", {"Ref": "AWS::StackName"}, " --resource AgentAutoScalingGroup --region ", {"Ref": "AWS::Region"}, "\n"
        ]]}}
      }
    },
    "AgentAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {"Ref": "AgentLaunchConfiguration"},
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "HealthCheckGracePeriod": 120,
        "HealthCheckType": "ELB",
        "VPCZoneIdentifier": [{"Ref": "SubnetA"}, {"Ref": "SubnetB"}],
        "Tags": [{
          "PropagateAtLaunch": true,
          "Value": "jenkins-agent",
          "Key": "Name"
        }]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": "PT10M",
          "WaitOnResourceSignals": true
        }
      }
    }
  },
  "Outputs": {
    "AdminUsername": {
      "Value": "admin",
      "Description": "User name for the Jenkins admin."
    },
    "MasterEndpoint": {
      "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["MasterELB", "DNSName"]}]]},
      "Description": "The DNS name for the Jenkins Master load balancer."
    }
  }
}
