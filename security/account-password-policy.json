{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Security: Account Password Policy, a cloudonaut.io template",
  "Parameters": {
  },
  "Resources": {
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "logs",
          "PolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            }]
          }
        }, {
          "PolicyName": "iam",
          "PolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "iam:UpdateAccountPasswordPolicy",
                "iam:DeleteAccountPasswordPolicy"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {"Fn::Join": ["", [
"var AWS = require('aws-sdk');", "\n",
"var response = require('cfn-response');", "\n",
"var iam = new AWS.IAM();", "\n",
"exports.handler = function(event, context) {", "\n",
"  console.log('Invoke: ' + JSON.stringify(event));", "\n",
"  function cb(err) {", "\n",
"    if (err) {", "\n",
"      console.log('Error: ' + JSON.stringify(err));", "\n",
"      response.send(event, context, response.FAILED, {});", "\n",
"    } else {", "\n",
"      response.send(event, context, response.SUCCESS, {});", "\n",
"    }", "\n",
"  }", "\n",
"  if (event.RequestType === 'Delete') {", "\n",
"    iam.deleteAccountPasswordPolicy({}, cb);", "\n",
"  } else if (event.RequestType === 'Create' ||Â event.RequestType === 'Update') {", "\n",
"    iam.updateAccountPasswordPolicy({", "\n",
"      AllowUsersToChangePassword: true,", "\n",
"      HardExpiry: false,", "\n",
"      MaxPasswordAge: 90,", "\n",
"      MinimumPasswordLength: 12,", "\n",
"      PasswordReusePrevention: 6,", "\n",
"      RequireLowercaseCharacters: true,", "\n",
"      RequireNumbers: true,", "\n",
"      RequireSymbols: true,", "\n",
"      RequireUppercaseCharacters: true", "\n",
"    }, cb);", "\n",
"  } else {", "\n",
"    context.fail(new Error('unsupported RequestType: ' + event.RequestType));", "\n",
"  }", "\n",
"};", "\n"
          ]]}
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {"Fn::GetAtt": ["LambdaRole", "Arn"]},
        "Runtime": "nodejs",
        "Timeout": 60
      }
    },
    "PasswordPolicy": {
      "DependsOn": "LambdaFunction",
      "Type": "Custom::PasswordPolicy",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["LambdaFunction", "Arn"]}
      }
    }
  }
}
